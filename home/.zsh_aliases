preexec_functions=()

function expand_aliases {
  input_command=$1
  expanded_command=$2
  if [ $input_command != $expanded_command ]; then
    print -nP $PROMPT
    echo $expanded_command
  fi
}

preexec_functions+=expand_aliases

# GENERAL

alias edit="atom"
alias lla="ls -alh"
alias mmv="noglob zmv -W"
alias c="clear"
alias x="exit"
alias duh="du -h . | grep '\./[^/]*$'"
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias myip="/sbin/ifconfig | grep 'inet ' | awk '{ print $2}'"
alias myssh="echo -n `cat ~/.ssh/id_rsa.pub` | pbcopy"
alias dnsflush="sudo killall -HUP mDNSResponder"
alias serve="python -m SimpleHTTPServer"
alias chromekill="ps ux | grep '[C]hrome Helper --type=renderer' | grep -v extension-process | tr -s ' ' | cut -d ' ' -f2 | xargs kill"
alias sshc="edit ~/.ssh/config"
alias gemc="edit ~/.gemrc"

alias nw="/Applications/node-webkit.app/Contents/MacOS/node-webkit"

function mcd() {
  if [ -z "$1" ]; then
    not_ok 'mcd: missing directory name'
    return -1
  fi

  mkdir $1 && cd $1
}

function powit() {
  if [ -z "$1" ]; then
    echo 'Using default port 5000'
    port=5000
  else
    port=$1
  fi

  if [ -z "$2" ]; then
    echo 'Using basename as domain : '`basename $PWD`
    domain=`basename $PWD`
  else
    domain=$2
  fi

  echo $port > ~/.pow/$domain

  echo "0.0.0.0:$port > $domain.dev"
}

function encrypt() {
  if [ -z "$1" ]; then
    not_ok 'encrypt: missing file name'
    return -1
  fi

  keybase encrypt calyhre $1 -o $1.temp &&
  rm $1 &&
  mv $1.temp $1
}

function decrypt() {
  if [ -z "$1" ]; then
    not_ok 'decrypt: missing file name'
    return -1
  fi

  keybase decrypt $1
}

# CURL

alias get="curl -O"

alias workcd="cd \`cat $HOME/.WORK_ON\`"
alias workpwd="cat $HOME/.WORK_ON"
alias workoff="rm $HOME/.WORK_ON && rm $HOME/Work\ on"
alias workon="echo \`pwd\` > $HOME/.WORK_ON && ln -sfn \`workpwd\` $HOME/Work\ on"
alias workopen="open \`workpwd\`"

alias wcd="workcd"
alias won="workon"
alias wof="workoff"
alias wop="workopen"

# ZSH

alias thin="nocorrect thin"
alias thor="nocorrect thor"
alias npm="nocorrect npm"
alias grunt="nocorrect grunt"
#alias guard="nocorrect guard"
alias neat="nocorrect neat"
alias rspec="nocorrect rspec"
alias reload="echo \`pwd\` > $HOME/.RELOAD && source ~/.zshrc"

alias zshc="edit $DOTFILES/.zshrc"
alias zsha="edit $DOTFILES/.zsh_aliases"

alias gitc="edit $DOTFILES/.gitconfig"

# RUBY

alias be="bundle exec"
alias bem="bundle exec middleman"

# RAILS

alias fs="foreman start"
alias fsd="foreman start -f Procfile.development"
alias fr="foreman run"
alias frc="foreman run rails console"
alias frg="foreman run guard"
alias frr="foreman run ruby"
alias sss="RAILS_ENV=test rake sunspot:solr:start"
alias rdbd="rake db:drop"
alias rdbc="rake db:create"
alias rdbm="rake db:migrate"
alias rdbs="rake db:seed"
alias dbreset="rdbd && rdbc && rdbm"

function rails_init () {
  if [ -z "$1" ]; then
    not_ok 'rails_init: missing app name argument'
    return -1
  fi

  ( echo -n "Initializing folder and env..."
  mkdir $1 && cd $1 && rbenv_init &&
  gem install bundler > /dev/null &&
  gem install rails > /dev/null &&
  touch .env &&
  ok || not_ok ) &&

  cd $1 &&

  ( echo -n "Generate rails app and repo..."
  git init .  > /dev/null &&
  rails new . > /dev/null &&
  gi rails,osx > .gitignore &&
  ok || not_ok ) &&

  ( echo -n "Customize app and Gemfile....."
  echo "

# Always ignore important files
/config/database.yml
/.env
" >> .gitignore &&
  dbyml_init config/database.yml `whoami` &&
  dbyml_init config/database.yml.tmpl &&
  mv README.rdoc README.md &&
  edit Gemfile &&
  ok || not_ok ) &&

  ( echo -n "Initialize bundle and DB....."
  bundle > /dev/null &&
  rake db:create  > /dev/null &&
  ok || not_ok ) &&

  echo -n "Finalization..................."
  ga . && gc -m 'Initial commit'  > /dev/null &&
  ok || not_ok

  workon
}

function dbyml_init () {
  if [ -z "$1" ]; then
    not_ok 'dbyml_init: missing output database.yml file'
    return -1
  fi

  if [ -z "$2" ]; then
    user="{username}"
  else
    user=$2
  fi

  echo "development:
  adapter: postgresql
  encoding: unicode
  database: `basename $PWD`_development
  username: $user

test:
  adapter: postgresql
  encoding: unicode
  database: `basename $PWD`_test
  username: $user

production:
  adapter: postgresql
  encoding: unicode
  database: `basename $PWD`_production
  username: $user
" > $1
}


# RUBY

alias t="ruby -Itest"

function rbenv_init () {
  echo ".gems" > .rbenv-gemsets &&
  echo `rbenv version | awk '{print $1;}'` > .ruby-version
}

# GIT

alias gll="git log --pretty=format:'%C(yellow)%h %C(cyan)%ad %C(reset)%s %C(green)[%cn]' --decorate --date=short --graph"
alias gd="git diff --ignore-space-at-eol -b -w --ignore-blank-lines"
alias gds="git diff --staged"
alias gap="git add -p"
alias gsync="git fetch upstream && git rebase upstream/master"
alias nope="git commit -m 'ಠ_ಠ'"
alias ggpush='git push origin $(current_branch)'
alias ggpull='git pull origin $(current_branch)'
alias wip='git add . && git commit -m "WIP"'
alias unwip='git reset HEAD~1'

# Fix oh-my-zsh's git plugin conflict
if type gclean > /dev/null; then
  unalias gclean
fi

function bump () {
  git commit -m "Bump to v$1" &&
  git tag -a "v$1" -m "Bumped to version v$1"
}

function gclean () {
   ggpull &&
   git remote prune origin &&
   git fetch &&
   git branch -a --merged | grep -v -E 'master|stable|staging|canary|production|pull|'`git rev-parse --abbrev-ref HEAD` | sed 's/^/git branch -d/' | sed 's/branch -d  remotes\/origin\//push origin :/'
 }

function gi() {
  curl -L -s https://www.gitignore.io/api/$@;
}

function gpr() {
  from_owner=`git remote -v | grep '^origin.*fetch)$' | sed -n -e 's/\(.*\)git@github.com:\(.*\)\/\(.*\)(fetch)/\2/p'`
  from_branch=`git rev-parse --abbrev-ref HEAD`

  if [ -z "$1" ]; then
    to_owner=$from_owner
  else
    to_owner=$1
  fi

  if [ -z "$2" ]; then
    to_branch=master
  else
    to_branch=$2
  fi

  read "?Make a PR to $to_owner:$to_branch from $from_owner:$from_branch ? "
  if [[ ! $REPLY =~ ^[Yy]$ ]]
  then
    return -1
  else
    ggpush &&
    hub pull-request -b $to_owner:$to_branch -h $from_owner:$from_branch
  fi
}

function gt () {
  if [ -z "$1" ]; then
    not_ok 'gt: missing required argument version number'
  else
    if [[ $1 == v* ]]; then
      TAG=$1
    else
      TAG=v$1
    fi

    git tag $TAG
    ggpush --tags
  fi
}

# HEROKU

alias he="heroku"
alias hew="watch heroku ps --app"
alias her="heroku run"
alias hec="heroku run console"

function hedumpdb () {
  if [ -z "$1" ]; then
    not_ok 'hedumpdb: missing required argument app name'
  else
    heroku pg:backups capture --app $1
    now=`date +%Y-%m-%d`
    backup_url=`heroku pg:backups public-url --app $1`
    ok $backup_url
    curl -o $DUMPS_FOLDER/$1_$now.dump $backup_url
  fi
}

function deploy_migrate () {
  if [ -z "$1" ]; then
    echo 'deploy: missing required branch'
  elif [ -z "$2" ]; then
    echo 'deploy: missing required app'
  else
    git checkout $1 &&
    git pull origin $1 &&
    heroku maintenance:on --app $2 &&
    git push $2 $1:master &&
    heroku run rake db:migrate --app $2 &&
    heroku maintenance:off --app $2 &&
    heroku open --app $2
  fi
}


# STUFF

alias redisd="redis-server /usr/local/etc/redis.conf"
alias redis="redis-cli"
alias dbrestore="pg_restore --verbose --clean --no-acl --no-owner -d"

alias optimg="open -a ImageOptim.app"

function dbdump () {
  if [ -z "$1" ]; then
    not_ok 'dumpdb: missing required argument database name'
  else
    if [ -z "$2" ]; then
      not_ok 'dumpdb: missing required argument dump file'
    else
      pg_dump -Fc $1 > $2_`date +%Y-%m-%d`.dump
    fi
  fi
}

transfer() {
  # write to output to tmpfile because of progress bar
  tmpfile=$( mktemp -t transferXXX );
  curl --progress-bar --upload-file $1 https://transfer.sh/$(basename $1) >> $tmpfile;
  cat $tmpfile;
  rm -f $tmpfile;
}

alias lod='echo -n ಠ_ಠ | LANG=en_US.UTF-8 pbcopy'
alias transfer=transfer

function repeat() {
    while [ $(( $1 -= 1 )) -ge 0 ]; do
        "$@"
    done
}

function ok() {
  if [ -z "$1" ]; then
    echo -e "\033[32mOK\033[0m"
  else
    echo -e "\033[32m$1\033[0m"
  fi
}

function not_ok() {
  if [ -z "$1" ]; then
    echo -e "\033[31mNOT OK\033[0m"
  else
    echo -e "\033[31m$1\033[0m"
  fi
}

function update () {
  # Upgrade dotfiles
  echo -n "\nDotfiles..." &&
  $DOTFILES && ggpull --quiet > /dev/null && cd - > /dev/null &&
  ok || not_ok

  # Upgrade homebrew
  echo -n "Homebrew..." &&
  brew update > /dev/null &&
  ok || not_ok

  # Upgrade heroku toolbelt
  echo -n "Heroku....." &&
  heroku update > /dev/null &&
  ok || not_ok

  # Annnd reload!
  echo "Reload.....\n" &&
  reload
}
