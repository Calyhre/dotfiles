#!/usr/bin/env ruby

require 'logger'
require 'git'
require 'ruby-progressbar'
require 'highline/import'
require 'optparse'
require 'optparse/time'
require 'ostruct'
require 'pp'
require 'rainbow'

KEEP_COOL = Rainbow("\n\nNothing was made. Keep cool :)\n").yellow
NOT_FOUND = Rainbow("%{remote} not found :/\n").red
NO_REMOTES = Rainbow('No heroku remote was found').red
SHIT_HAPPENS = Rainbow("A problem occur during deployment.\nPlease see logs for more informations.\n").red
SUCCESS = Rainbow("\n%{remote} successfully deployed. Good job !\n").green

trap('SIGINT') { abort KEEP_COOL }

class OptionsParser
  VERSION = '0.0.1'
  CODES = %w(iso-2022-jp shift_jis euc-jp utf8 binary)
  CODE_ALIASES = { 'jis' => 'iso-2022-jp', 'sjis' => 'shift_jis' }

  def self.parse(args)
    # The options specified on the command line will be collected in *options*.
    # We set default values here.
    options = OpenStruct.new
    options.filter_host = 'git@heroku'
    options.force_push = false
    options.yes = false

    opt_parser = OptionParser.new do |opts|
      opts.banner =   'Usage: deploy [options] [remote]'
      opts.banner +=  "\nWill deploy current branch on remote"

      opts.separator ''
      opts.separator 'Specific options:'

      # Optional argument with keyword completion.
      opts.on('-r', '--remote-url [PATTERN]', 'Filter remotes urls with PATTERN', '  default: git@heroku') do |t|
        options.filter_host = t
      end

      # Optional argument with keyword completion.
      opts.on('-y', '--yes', 'Force deployment without asking') do
        options.yes = true
      end

      # Optional argument with keyword completion.
      opts.on('-f', '--force', 'Force push to heroku remote') do
        options.force_push = true
      end

      opts.separator ''
      opts.separator 'Common options:'

      # No argument, shows at tail.  This will print an options summary.
      # Try it and see!
      opts.on_tail('-h', '--help', 'Show this message') do
        puts opts
        exit
      end

      # Another typical switch to print the version.
      opts.on_tail('--version', 'Show version') do
        puts "He-deploy command v#{VERSION}"
        exit
      end
    end

    opt_parser.parse!(args)
    options
  end  # parse()
end

def are_you_sure?(question)
  print "#{question} [y/n]: "
  if STDIN.gets.strip.downcase =~ /^(y|yes)$/
    return true
  else
    return false
  end
end

def chicken_out?(branch, remote, force = false)
  return false if force
  sure = are_you_sure? "Deploying branch #{branch} on #{remote} ?"
  !sure
end

options = OptionsParser.parse(ARGV)

system 'cd `git rev-parse --show-toplevel`'
puts '# For debugging informations about this deploy, please see'
puts "# #{Dir.pwd}/log/deploy.log\n\n"

git = Git.open Dir.pwd, log: Logger.new("#{Dir.pwd}/log/deploy.log")
heroku_remotes = git.remotes.select { |r| r.url.include? options.filter_host }

abort NO_REMOTES if heroku_remotes.empty?

if ARGV[0]
  if heroku_remotes.map(&:name).include? ARGV[0]
    @remote = ARGV[0]
  else
    abort NOT_FOUND % { remote: ARGV[0] }
  end
elsif heroku_remotes.count == 1
  @remote = heroku_remotes.first
else
  puts 'Remotes available :'
  choose do |menu|
    menu.prompt = "\nPlease choose the remote to deploy to : "
    menu.choices(*heroku_remotes.map(&:name)) do |remote|
      @remote = remote
    end
  end
end

abort KEEP_COOL if chicken_out? git.current_branch, @remote, options.yes

begin
  push = fork do
    trap('SIGINT') { exit }
    opts = { force: options.force_push }
    git.push(@remote, "#{git.current_branch}:master", opts)
  end
  progress = fork do
    message = "Deploying branch #{git.current_branch} on #{@remote}"
    length = message.size + 3
    progressbar = ProgressBar.create(title: message, total: nil, length: length, format: '%t: %B', unknown_progress_animation_steps: ['-', '/', '|', '\\'], progress_mark: Rainbow('✓').green )

    trap 'QUIT' do
      progressbar.total = progressbar.progress
      progressbar.finish

      puts SUCCESS % { remote: @remote }
      exit
    end

    trap('SIGINT') do
      progressbar.progress_mark = Rainbow('✗').red
      progressbar.total = progressbar.progress
      progressbar.finish
      exit
    end

    loop do
      progressbar.increment
      sleep 0.5
    end
  end

  Process.wait push
  Process.kill 'QUIT', progress
  Process.wait progress
rescue
  Process.kill 'SIGINT', progress
  Process.wait progress
  puts SHIT_HAPPENS
end
